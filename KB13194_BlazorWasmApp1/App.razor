@inject PeopleDataService PeopleDS

<div style="max-width:800px; margin:auto; padding:1em; display:flex; flex-direction:column; gap:1em;">
    <div style="text-align:center;">
        <button @onclick="OnGoToFirstClicked">Go to the first</button>
        <button @onclick="OnGoToLastClicked">Go to the last</button>
    </div>
    @if (people == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <IgbGrid @ref="igbGrid" Data="people" PrimaryKey="ID" AutoGenerate="false" Height="300px"
                 DisplayDensity="DisplayDensity.Compact">
            <IgbColumn Field="@nameof(Person.ID)" Header="ID" Hidden=true />
            <IgbColumn Field="@nameof(Person.FamilyName)" Header="FamilyName" />
            <IgbColumn Field="@nameof(Person.GivenName)" Header="GivenName" />
            <IgbColumn Field="@nameof(Person.Prefecture)" Header="Prefecture" />
            <IgbColumn Field="@nameof(Person.City)" Header="City" />
        </IgbGrid>
    }
</div>

@code {
    private IEnumerable<Person> people = [];

    private IgbGrid? igbGrid = null;

    protected override async Task OnInitializedAsync()
    {
        this.people = await PeopleDS.GetPeopleAsync();
    }

    private async Task OnGoToFirstClicked()
    {
        if (this.igbGrid != null)
        {
            await this.igbGrid.NavigateToAsync(0, 0, null);
        }
    }

    private async Task OnGoToLastClicked()
    {
        if (this.igbGrid != null)
        {
            await this.igbGrid.NavigateToAsync(
                this.people.Count() - 1,
                this.igbGrid.ActualColumns.Count(col => col.Hidden == false) - 1,
                null);
        }
    }
}